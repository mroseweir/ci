version: 2.1

orbs:
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1


jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:15.1
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      # - node/install-packages:
      #     pkg-manager: yarn 
      - run:
          name: Run tests
          command: npm test

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - build-and-test
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test

# version: 2
# jobs:
#   one:
#     docker:
#       - image: circleci/ruby:2.4.1
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     steps:
#       - checkout
#       - run: echo "A first hello"
#       - run: mkdir -p my_workspace
#       - run: echo "Trying out workspaces" > my_workspace/echo-output
#       - persist_to_workspace:
#           # Must be an absolute path, or relative path from working_directory
#           root: my_workspace
#           # Must be relative path from root
#           paths:
#             - echo-output
#   two:
#     docker:
#       - image: circleci/ruby:2.4.1
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     steps:
#       - checkout
#       - run: echo "A more familiar hi"
#       - attach_workspace:
#           # Must be absolute path or relative path from working_directory
#           at: my_workspace

#       - run: |
#           if [[ $(cat my_workspace/echo-output) == "Trying out workspaces" ]]; then
#             echo "It worked!";
#           else
#             echo "Nope!"; exit 1
#           fi
#       - run: npm run test
# workflows:
#   version: 2
#   one_and_two:
#     jobs:
#       - one
#       - two:
#           requires:
#             - one
      

# # version: 2
# # jobs: # we now have TWO jobs, so that a workflow can coordinate them!
# #   one: # This is our first job.
# #     docker: # it uses the docker executor
# #       - image: circleci/ruby:2.4.1 # specifically, a docker image with ruby 2.4.1
# #         auth:
# #           username: mydockerhub-user
# #           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
# #     # Steps are a list of commands to run inside the docker container above.
# #     steps:
# #       - checkout # this pulls code down from GitHub
# #       - run: echo "A first hello" # This prints "A first hello" to stdout.
# #       - run: sleep 25 # a command telling the job to "sleep" for 25 seconds.
# #   two: # This is our second job.
# #     docker: # it runs inside a docker image, the same as above.
# #       - image: circleci/ruby:2.4.1
# #         auth:
# #           username: mydockerhub-user
# #           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
# #     steps:
# #       - checkout
# #       - run: echo "A more familiar hi" # We run a similar echo command to above.
# #       - run: sleep 15 # and then sleep for 15 seconds.
# # # Under the workflows: map, we can coordinate our two jobs, defined above.
# # workflows:
# #   version: 2
# #   one_and_two: # this is the name of our workflow
# #     jobs: # and here we list the jobs we are going to run.
# #       - one
# #       - two


# # version: 2.1
# # orbs:
# #   node: circleci/node@1.1
# # jobs:
# #   build:
# #     executor:
# #       name: node/default
# #       tag: '10.4'
# #     steps:
# #       - checkout
# #       - node/with-cache:
# #           steps:
# #             - run: npm install
# #       - run: npm run test